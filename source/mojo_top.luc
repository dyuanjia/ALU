module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    input alufn [7],
    input a [16],
    input b [16],
    input a0,
    input a1,
    input a2,
    input a3,
    input a4,
    input a5,
    input a6,
    input a7,
    input a8,
    input a9,
    input a10,
    input a11,
    input a12,
    input a13,
    input a14,
    input a15
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      fsm modes = {MANUAL, AUTO};
    }    
  }
  
  // Initialize alu
  alu alu16;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    
    // Connect inputs and outputs of external signals to the ALU unit
    alu16.alufn = alufn;
    alu16.a = a;
    alu16.b = b;
    
    io_led = 3x{{8h00}};
    // Testing area during development 
    case(modes.q) {
      modes.MANUAL:
        alu16.alufn = io_dip[2][6:0];
        //alu16.a = 16b11;
        alu16.b[15:8] = io_dip[1];
        alu16.b[7:0] = io_dip[0];
        io_led[0] = alu16.out[7:0];
        io_led[1] = alu16.out[15:8];
        
        io_led[2][7:3] = 5h00;
        io_led[2][2] = alu16.z;
        io_led[2][1] = alu16.v;
        io_led[2][0] = alu16.n;
        
        alu16.a[0] = a0;
        alu16.a[1] = a1;
        alu16.a[2] = a2;
        alu16.a[3] = a3;
        alu16.a[4] = a4;
        alu16.a[5] = a5;
        alu16.a[6] = a6;
        alu16.a[7] = a7;
        alu16.a[8] = a8;
        alu16.a[9] = a9;
        alu16.a[10] = a10;
        alu16.a[11] = a11;
        alu16.a[12] = a12;
        alu16.a[13] = a13;
        alu16.a[14] = a14;
        alu16.a[15] = a15;
        
        
      modes.AUTO:
        io_led[0] = alu16.out[7:0];
        io_led[1] = alu16.out[15:8];
    } 
    // Testing area ends here.    
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
   
  }
}