module fsm_tester (
    input clk,  // clock
    input rst,  // reset
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    output out [16],
    output v,
    output n,
    output z
    
  ) {
  
  const DIV = 26;           // regulates the speed in which the inputs are generated
  sig inputa[16];
  sig inputb[16];
  //sig aluout[16];  
  //sig alufntest[7];
  
  .clk(clk) {
    .rst(rst) {
      fsm test_modules = {START, ADD,ADD2,ADD3,ADD4,SUB,SUB2,SUB3,SUB4,SUB5,AND,NAND, OR,NOR, XOR,XNOR, A, B, 
                          SHL, SHR, SRA, CMPEQ_TRUE, CMPEQ_FALSE,CMPLT_TRUE, CMPLT_FALSE, CMPLE_TRUE, CMPLE_FALSE, 
                          MUL, DIVIDE, ERROR, DONE}; // instance of a finite state machine
      dff module_change[1+DIV];                     // use a flip flop as a counter for different inputs
      dff next_state[5];
      display seg;                        // instance used to display error message
    }
  }
  
  alu alu16;
  
  always {
    io_led = 3x{{8h00}};     // turn LEDs off
    io_seg = ~seg.seg;       // connect segments to the driver
    io_sel = ~seg.sel;       // connect select to the driver
    // increment buffer counter
    alu16.alufn = 7b0;
    alu16.a = 16b0;
    alu16.b = 16b0;
    // initialize variables
    seg.chars = {5h0, 5h0, 5h0, 5h0};
    out = 16b0;
    
    if(io_dip[2][7]==1){
      alu16.e = 1;
    } else {
      alu16.e = 0;
    }
  
    
    module_change.d = module_change.q + 1;
    
    v = alu16.v;
    n = alu16.n;
    z = alu16.z;
        
    case (test_modules.q) {
      test_modules.START:     //Initialize
        next_state.d = 5b0;
        module_change.d = 1;
        if(io_button[3]==1)  //Go to adder state
          test_modules.d=test_modules.ADD;
        
      test_modules.ADD:     //positive + positive,  testing adder module
        next_state.d = 5b1;
        seg.chars = {5h2, 5h8, 5h8, 5h0}; //Display add
        alu16.alufn=7b0;    //select adder unit
        inputa=16b11;       //a=3
        alu16.a = inputa;
        inputb=16b11000;    //b=24
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];  //outputs for adder
        out[15:8] = alu16.out[15:8];
        v = alu16.v;
        n = alu16.n;
        z = alu16.z;
        
        if(alu16.out!=inputa+inputb){  // error checking
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.ADD2;
        }
        
      test_modules.ADD2:     // positive + negative
        next_state.d = 5b10;
        seg.chars = {5h2, 5h8, 5h8, 5h0}; //display add
        alu16.alufn=7b0;
        inputa=16b1;                // a=1
        alu16.a = inputa;
        inputb=16b1111111111111111; //b=-1
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        v = alu16.v;
        n = alu16.n;
        z = alu16.z;    // z should show

        if(alu16.out!=inputa+inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
            test_modules.d = test_modules.ADD3;
        }
        
      test_modules.ADD3:     // negative + negative
        next_state.d = 5b11;
        seg.chars = {5h2, 5h8, 5h8, 5h0};
        alu16.alufn=7b0;
        inputa=16b1111111111111111; //a=-1
        alu16.a = inputa;
        inputb=16b1111111111111111; //b=-1
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        v = alu16.v;
        n = alu16.n; // n should show
        z = alu16.z; 

        if(alu16.out!=inputa+inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
            test_modules.d = test_modules.ADD4;
        }
        
      test_modules.ADD4:     // negative + negative overflows
        next_state.d = 5b100;
        seg.chars = {5h2, 5h8, 5h8, 5h0};
        alu16.alufn=7b0;
        inputa=16b1000000000000000;  //a=-32768
        alu16.a = inputa;
        inputb=16b1000000000000000; //b=-32768
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        v = alu16.v; //v should show since overflow
        n = alu16.n;
        z = alu16.z;

        if(alu16.out!=inputa+inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
            test_modules.d = test_modules.SUB;
        }
        
      test_modules.SUB:
      //show positive - positive
        next_state.d = 5b101;
        seg.chars = {5hC, 5hB, 5hA, 5h0};  //display sub
        alu16.alufn=7b1;
        inputa=16b11011; //a=27
        alu16.a = inputa; 
        inputb=16b11;  //b=3
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        v = alu16.v; 
        n = alu16.n;
        z = alu16.z;
        if(alu16.out!=inputa-inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
            test_modules.d = test_modules.SUB2;
        }
        
      test_modules.SUB2:
      //show positive - neg
        next_state.d = 5b110;
        seg.chars = {5hC, 5hB, 5hA, 5h0};
        alu16.alufn=7b1;
        inputa=16b11011;  //a=27
        alu16.a = inputa;
        inputb=16b1111111111111111; //b=-1
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        v = alu16.v; 
        n = alu16.n;
        z = alu16.z;
        if(alu16.out!=inputa-inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
            test_modules.d = test_modules.SUB3;
        }
        
      test_modules.SUB3:
      //show 2 negative numbers sub
        next_state.d = 5b111;
        seg.chars = {5hC, 5hB, 5hA, 5h0};
        alu16.alufn=7b1;
        inputa=16b1000000000000000;  //a=-32768
        alu16.a = inputa;
        inputb=16b1111111111111111;  //b=-1
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        v = alu16.v; 
        n = alu16.n; //n should show because negative
        z = alu16.z; 
        if(alu16.out!=inputa-inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
            test_modules.d = test_modules.SUB4;
        }
        
      test_modules.SUB4: //negative - positive
        next_state.d = 5b1000;
        seg.chars = {5hC, 5hB, 5hA, 5h0};
        alu16.alufn=7b1;
        inputa=16b1000000000000000;  //a=-32768 
        alu16.a = inputa;
        inputb=16b0100000000000000;  //b=16384
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        v = alu16.v; //v should show overflow
        n = alu16.n;
        z = alu16.z;
        if(alu16.out!=inputa-inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
            test_modules.d = test_modules.SUB5;
        }
        
      test_modules.SUB5: //negative - negative
      //show Z
        next_state.d = 5b1001;
        seg.chars = {5hC, 5hB, 5hA, 5h0};
        alu16.alufn=7b1;
        inputa=16b1111111111111111;  //a=-1
        alu16.a = inputa;
        inputb=16b1111111111111111;  //b=-1
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        v = alu16.v; 
        n = alu16.n;
        z = alu16.z; //z should show
        if(module_change.q[26]==1 && alu16.out!=inputa-inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
            test_modules.d = test_modules.AND;
        }
        // A is 0000111100001111, B is 0000000011111111. One 4 bit in the 16 bit represents one test case in the truth table for bool func
      //Yet to add else for error handling
      test_modules.AND:
        next_state.d = 5b1010;
        seg.chars = {5h2, 5h7, 5h8, 5h0};
      //alufn == 7b0011000 to activate AND
        alu16.alufn=7b0011000;
        inputa=16b0000111100001111;
        alu16.a = inputa;
        inputb=16b0000000011111111;
        alu16.b= inputb;
        out[7:0]= alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=(inputa&inputb)){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.OR;
        }
      test_modules.OR:
        next_state.d = 5b1011;
        //alufn[3:0] == 7b0011110 to activate OR
        seg.chars = {5h5, 5h6, 5h0, 5h0};
        alu16.alufn=7b0011110;
        inputa=16b0000111100001111;
        alu16.a = inputa;
        inputb=16b0000000011111111;
        alu16.b= inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=(inputa|inputb)){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.XOR;
        }
        
      test_modules.XOR:
        next_state.d = 5b1100;
        //alufn[3:0] == 7b0010110 to activate XOR
        seg.chars = {5h9, 5h5, 5h6, 5h0};
        alu16.alufn=7b0010110;
        inputa=16b0000111100001111;
        alu16.a = inputa;
        inputb=16b0000000011111111;
        alu16.b= inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=(inputa^inputb)){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.A;
        }
      test_modules.A:
        next_state.d = 5b1101;
        //alufn[3:0] == 7b0011010 to activate 'A'
        seg.chars = {5h2, 5h0, 5h0, 5h0};
        alu16.alufn=7b0011010;
        inputa= 16b0000111100001111;
        alu16.a = inputa;
        inputb = 16b0000000011111111;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=inputa){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.NAND;
        }
      test_modules.NAND:
        next_state.d = 5b1110;
      //alufn[3:0] == 7b0010111 to activate NAND
        seg.chars = {5h7, 5h2, 5h7, 5h8};
        alu16.alufn = 7b0010111;
        inputa = 16b0000111100001111;
        alu16.a = inputa;
        inputb = 16b0000000011111111;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=~(inputa&inputb)){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.NOR;
        }
      test_modules.NOR:
        next_state.d = 5b1111;
      //alufn[3:0] == 7b0010001 to activate NOR
        seg.chars = {5h7, 5h5, 5h6, 5h0}; 
        alu16.alufn = 7b0010001;
        inputa = 16b0000111100001111;
        alu16.a = inputa;
        inputb = 16b0000000011111111;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=~(inputa|inputb)){
          test_modules.d = test_modules.ERROR;
        }
         if(module_change.q==0){
          test_modules.d = test_modules.XNOR;
        }
      test_modules.XNOR:
        next_state.d = 5b10000;
      //alufn[3:0] == 7b0011001 to activate XNOR
        seg.chars = {5h9, 5h7, 5h5, 5h6};
        alu16.alufn = 7b0011001;
        inputa = 16b0000111100001111;
        alu16.a = inputa;
        inputb = 16b0000000011111111;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=(inputa~^inputb)){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.B;
        }
      test_modules.B:
        next_state.d = 5b10001;
      //alufn[3:0] == 7b0010101 to activate B
        seg.chars = {5hA, 5h0, 5h0, 5h0}; 
        alu16.alufn = 7b0010101;
        inputa = 16b0000111100001111;
        alu16.a = inputa;
        inputb = 16b0000000011111111;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.CMPEQ_TRUE;
        }
        
       test_modules.CMPEQ_TRUE: //show equality is true
        next_state.d = 5b10010;
      //alufn[3:0] == 7b0110011 to activate B 
        seg.chars = {5hE, 5hF, 5h10, 5h0};
        alu16.alufn = 7b0110011;
        inputa = 16b1010101010101010;
        alu16.a = inputa;
        inputb = 16b1010101010101010;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && inputa==inputb && alu16.out==16b0){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.CMPEQ_FALSE;
        }
        
       test_modules.CMPEQ_FALSE:  //show equality false
        next_state.d = 5b10011;
        seg.chars = {5hE, 5hF, 5h10, 5h0};
      //alufn[3:0] == 7b0110011 to activate B 
        alu16.alufn = 7b0110011;
        inputa = 16b1010101010101010;
        alu16.a = inputa;
        inputb = 16b1010101010100000;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && inputa!=inputb && alu16.out==16b1){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.CMPLT_TRUE;
        }
        
       test_modules.CMPLT_TRUE:  //show a<b true
        next_state.d = 5b10100;
        seg.chars = {5hE, 5hF, 5h4, 5h0};
      //alufn[3:0] == 7b0110101 to activate B 
        alu16.alufn = 7b0110101;
        inputa = 16b0000000000000111;  //a = 7
        alu16.a = inputa;
        inputb = 16b0111000000000000;  //b=28672
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && inputa<inputb && alu16.out==16b0){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.CMPLT_FALSE;
        }
        
       test_modules.CMPLT_FALSE:  //show a<b false
        next_state.d = 5b10101;
        seg.chars = {5hE, 5hF, 5h4, 5h0};
      //alufn[3:0] == 7b0110101 to activate B 
        alu16.alufn = 7b0110101;
        inputa = 16b0111000000000000;  //a=28672
        alu16.a = inputa;
        inputb = 16b0000000000000111;  //b=7
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && inputa>=inputb && alu16.out==16b1){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.CMPLE_TRUE;
        }
        
       test_modules.CMPLE_TRUE:  //show a<=b true
        next_state.d = 5b10110;
        seg.chars = {5hE, 5hF, 5h4, 5h10};
      //alufn[3:0] == 7b0110111 to activate B 
        alu16.alufn = 7b0110111;
        inputa = 16b0000000000000111; //a=7
        alu16.a = inputa;
        inputb = 16b0111000000000000;  //b=28672
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && inputa<=inputb && alu16.out==16b0){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.CMPLE_FALSE;
        }
       
       test_modules.CMPLE_FALSE:   //show a<=b false
        next_state.d = 5b10111;
        seg.chars = {5hE, 5hF, 5h4, 5h10};
      //alufn[3:0] == 7b0110111 to activate B 
        alu16.alufn = 7b0110111;
        inputa = 16b0111000000000000;  //a = 28672
        alu16.a = inputa;
        inputb = 16b0000000000000111;  //b = 7
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && inputa>inputb && alu16.out==16b1){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.SHL;  //Go to shift left state
        }
       
       test_modules.SHL:  //show shift left
        next_state.d = 5b11000;
        seg.chars = {5hC, 5h9, 5h4, 5h0};  //show shl
      //alufn[3:0] == 7b0100000 to activate B 
        alu16.alufn = 7b0100000;
        inputa = 16b1011011101110011;
        alu16.a = inputa;
        inputb = 16b0000000000000010; //shift by 2 places
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=inputa << inputb[3:0]){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.SHR; //Go to shift right state
        }
        
      test_modules.SHR: // show right shift
        next_state.d = 5b11001;
        seg.chars = {5hC, 5h9, 5h6, 5h0}; //display shr
      //alufn[3:0] == 7b0100001 to activate B 
        alu16.alufn = 7b0100001;
        inputa = 16b1011011101110011;
        alu16.a = inputa;
        inputb = 16b0000000000000010; //shift by 2 places
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=inputa >> inputb[3:0]){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.SRA;  //Go to shift right arithmetric state
        }
        
      test_modules.SRA: //shift right with arithmetric
        next_state.d = 5b11010;
        seg.chars = {5hC, 5h6, 5h2, 5h0}; //display SRA
      //alufn[3:0] == 7b0100011 to activate B 
        alu16.alufn = 7b0100011;
        inputa = 16b1011011101110011;
        alu16.a = inputa;
        inputb = 16b0000000000000010; //shift by 2 places
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=($signed(inputa) >>> inputb[3:0])){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.MUL;
        }
       
      test_modules.MUL:     // testing multiply module
        next_state.d = 5b11011;
        seg.chars = {5h7, 5h11, 5hB, 5h4};
        alu16.alufn = 7b1000000;
        inputa = 16b0000000000001010;
        alu16.a = inputa;
        inputb = 16b0000000000000010;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=inputa*inputb){
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.DIVIDE;
        }
        
      test_modules.DIVIDE:     // testing divide module
        next_state.d = 5b11100;
        seg.chars = {5h8, 5h3, 5hB, 5h0};
        alu16.alufn = 7b1100000;
        inputa = 16b0000000001100100;
        alu16.a = inputa;
        inputb = 16b0000000000001010;
        alu16.b = inputb;
        out[7:0] = alu16.out[7:0];
        out[15:8] = alu16.out[15:8];
        if(module_change.q[26]==1 && alu16.out!=inputa/inputb || inputb==0){ // Test for divide by 0 and wrong input
          test_modules.d = test_modules.ERROR;
        }
        if(module_change.q==0){
          test_modules.d = test_modules.DONE;
        }
        
      test_modules.ERROR:     // error state to display error message
        seg.chars = {5h1, 5h2, 5h3, 5h4};
        module_change.d = 1;
        out = 16b1;
        if(io_button[4]==1){  // go back to where it left off
          case(next_state.q){
            b00000:
              test_modules.d = test_modules.ADD;
            b00001:
              test_modules.d = test_modules.ADD2;
            b00010:
              test_modules.d = test_modules.ADD3;
            b00011:
              test_modules.d = test_modules.ADD4;
            b00100:
              test_modules.d = test_modules.SUB;
            b00101:
              test_modules.d = test_modules.SUB2;
            b00110:
              test_modules.d = test_modules.SUB3;
            b00111:
              test_modules.d = test_modules.SUB4;
            b01000:
              test_modules.d = test_modules.SUB5;
            b01001:
              test_modules.d = test_modules.AND;
            b01010:
              test_modules.d = test_modules.OR;
            b01011:
              test_modules.d = test_modules.XOR;
            b01100:
              test_modules.d = test_modules.A;
            b01101:
              test_modules.d = test_modules.NAND;
            b01110:
              test_modules.d = test_modules.NOR;
            b01111:
              test_modules.d = test_modules.XNOR;
            b10000:
              test_modules.d = test_modules.B;
            b10001:
              test_modules.d = test_modules.CMPEQ_TRUE;
            b10010:
              test_modules.d = test_modules.CMPEQ_FALSE;
            b10011:
              test_modules.d = test_modules.CMPLT_TRUE;
            b10100:
              test_modules.d = test_modules.CMPLT_FALSE;
            b10101:
              test_modules.d = test_modules.CMPLE_TRUE;
            b10110:
              test_modules.d = test_modules.CMPLE_FALSE;
            b10111:
              test_modules.d = test_modules.SHL;
            b11000:
              test_modules.d = test_modules.SHR;
            b11001:
              test_modules.d = test_modules.SRA;
            b11010:
              test_modules.d = test_modules.MUL;
            b11011:
              test_modules.d = test_modules.DIVIDE;
            b11100:
              test_modules.d = test_modules.DONE;
          }
        }
        
        
      test_modules.DONE:
        seg.chars = {5h8, 5h5, 5h7, 5h10};
        out = 16b0;
    }
  }
}

