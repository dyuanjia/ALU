/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_tester_2 (
    input clk,
    input rst,
    output reg [23:0] io_led,
    input [6:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out
  );
  
  
  
  localparam DIV = 5'h1a;
  
  reg [15:0] inputa;
  
  reg [15:0] inputb;
  
  reg [15:0] aluout;
  
  reg [6:0] alufntest;
  
  localparam START_test_modules = 5'd0;
  localparam ADD_test_modules = 5'd1;
  localparam SUB_test_modules = 5'd2;
  localparam AND_test_modules = 5'd3;
  localparam NAND_test_modules = 5'd4;
  localparam OR_test_modules = 5'd5;
  localparam NOR_test_modules = 5'd6;
  localparam XOR_test_modules = 5'd7;
  localparam XNOR_test_modules = 5'd8;
  localparam A_test_modules = 5'd9;
  localparam B_test_modules = 5'd10;
  localparam SHL_test_modules = 5'd11;
  localparam SHR_test_modules = 5'd12;
  localparam SRA_test_modules = 5'd13;
  localparam CMPEQ_test_modules = 5'd14;
  localparam CMPLT_test_modules = 5'd15;
  localparam CMPLE_test_modules = 5'd16;
  localparam MUL_test_modules = 5'd17;
  localparam DIVIDE_test_modules = 5'd18;
  localparam DONE_test_modules = 5'd19;
  
  reg [4:0] M_test_modules_d, M_test_modules_q = START_test_modules;
  reg [27:0] M_module_change_d, M_module_change_q = 1'h0;
  reg [25:0] M_case_change_d, M_case_change_q = 1'h0;
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  reg [7-1:0] M_alu16_alufn;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_3 alu16 (
    .alufn(M_alu16_alufn),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n)
  );
  
  always @* begin
    M_test_modules_d = M_test_modules_q;
    M_module_change_d = M_module_change_q;
    M_case_change_d = M_case_change_q;
    
    io_led = 24'h000000;
    M_alu16_alufn = alufn;
    M_alu16_a = 16'h0000;
    M_alu16_b = 16'h0000;
    out = 16'h0000;
    M_module_change_d = M_module_change_q + 1'h1;
    M_case_change_d = M_case_change_q + 1'h1;
    
    case (M_test_modules_q)
      START_test_modules: begin
        M_module_change_d = 1'h1;
        M_case_change_d = 1'h1;
        M_test_modules_d = AND_test_modules;
      end
      ADD_test_modules: begin
        M_alu16_alufn[0+0-:1] = 1'h0;
        inputa = 16'h0003;
        M_alu16_a = inputa;
        inputb = 16'h0018;
        M_alu16_b = inputb;
        io_led[0+7-:8] = M_alu16_out[0+7-:8];
        io_led[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_alu16_out == inputa + inputb) begin
          M_test_modules_d = SUB_test_modules;
        end
      end
      SUB_test_modules: begin
        M_alu16_alufn[0+0-:1] = 1'h1;
        inputa = 16'h001b;
        M_alu16_a = inputa;
        inputb = 16'h0003;
        M_alu16_b = inputb;
        io_led[0+7-:8] = M_alu16_out[0+7-:8];
        io_led[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_alu16_out == inputa + inputb) begin
          M_test_modules_d = AND_test_modules;
        end
      end
      AND_test_modules: begin
        M_alu16_alufn = 7'h18;
        inputa = 16'h0f0f;
        M_alu16_a = inputa;
        inputb = 16'h00ff;
        M_alu16_b = inputb;
        out[0+7-:8] = M_alu16_out[0+7-:8];
        out[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_module_change_q == 1'h0) begin
          M_test_modules_d = OR_test_modules;
        end
      end
      OR_test_modules: begin
        M_alu16_alufn = 7'h1e;
        inputa = 16'h0f0f;
        M_alu16_a = inputa;
        inputb = 16'h00ff;
        M_alu16_b = inputb;
        out[0+7-:8] = M_alu16_out[0+7-:8];
        out[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_module_change_q == 1'h0) begin
          M_test_modules_d = XOR_test_modules;
        end
      end
      XOR_test_modules: begin
        M_alu16_alufn = 7'h16;
        inputa = 16'h0f0f;
        M_alu16_a = inputa;
        inputb = 16'h00ff;
        M_alu16_b = inputb;
        out[0+7-:8] = M_alu16_out[0+7-:8];
        out[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_module_change_q == 1'h0) begin
          M_test_modules_d = A_test_modules;
        end
      end
      A_test_modules: begin
        M_alu16_alufn = 7'h1a;
        inputa = 16'h0f0f;
        M_alu16_a = inputa;
        inputb = 16'h00ff;
        M_alu16_b = inputb;
        out[0+7-:8] = M_alu16_out[0+7-:8];
        out[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_module_change_q == 1'h0) begin
          M_test_modules_d = NAND_test_modules;
        end
      end
      NAND_test_modules: begin
        M_alu16_alufn = 7'h17;
        inputa = 16'h0f0f;
        M_alu16_a = inputa;
        inputb = 16'h00ff;
        M_alu16_b = inputb;
        out[0+7-:8] = M_alu16_out[0+7-:8];
        out[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_module_change_q == 1'h0) begin
          M_test_modules_d = NOR_test_modules;
        end
      end
      NOR_test_modules: begin
        M_alu16_alufn = 7'h11;
        inputa = 16'h0f0f;
        M_alu16_a = inputa;
        inputb = 16'h00ff;
        M_alu16_b = inputb;
        out[0+7-:8] = M_alu16_out[0+7-:8];
        out[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_module_change_q == 1'h0) begin
          M_test_modules_d = XNOR_test_modules;
        end
      end
      XNOR_test_modules: begin
        M_alu16_alufn = 7'h19;
        inputa = 16'h0f0f;
        M_alu16_a = inputa;
        inputb = 16'h00ff;
        M_alu16_b = inputb;
        out[0+7-:8] = M_alu16_out[0+7-:8];
        out[8+7-:8] = M_alu16_out[8+7-:8];
        if (M_module_change_q == 1'h0) begin
          M_test_modules_d = B_test_modules;
        end
      end
      B_test_modules: begin
        M_alu16_alufn = 7'h15;
        inputa = 16'h0f0f;
        M_alu16_a = inputa;
        inputb = 16'h00ff;
        M_alu16_b = inputb;
        out[0+7-:8] = M_alu16_out[0+7-:8];
        out[8+7-:8] = M_alu16_out[8+7-:8];
      end
      MUL_test_modules: begin
        out = 16'h0000;
      end
      DIVIDE_test_modules: begin
        out = 16'h0000;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_module_change_q <= 1'h0;
      M_case_change_q <= 1'h0;
      M_test_modules_q <= 1'h0;
    end else begin
      M_module_change_q <= M_module_change_d;
      M_case_change_q <= M_case_change_d;
      M_test_modules_q <= M_test_modules_d;
    end
  end
  
endmodule
