/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input [6:0] alufn,
    input [15:0] a,
    input [15:0] b
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam MANUAL_modes = 1'd0;
  localparam AUTO_modes = 1'd1;
  
  reg M_modes_d, M_modes_q = MANUAL_modes;
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  reg [7-1:0] M_alu16_alufn;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_2 alu16 (
    .alufn(M_alu16_alufn),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_alu16_alufn = alufn;
    M_alu16_a = a;
    M_alu16_b = b;
    io_led = 24'h000000;
    
    case (M_modes_q)
      MANUAL_modes: begin
        M_alu16_alufn = io_dip[16+0+6-:7];
        M_alu16_a = 16'h0180;
        M_alu16_b[8+7-:8] = io_dip[8+7-:8];
        M_alu16_b[0+7-:8] = io_dip[0+7-:8];
        io_led[0+7-:8] = M_alu16_out[0+7-:8];
        io_led[8+7-:8] = M_alu16_out[8+7-:8];
        io_led[16+3+4-:5] = 5'h00;
        io_led[16+2+0-:1] = M_alu16_z;
        io_led[16+1+0-:1] = M_alu16_v;
        io_led[16+0+0-:1] = M_alu16_n;
      end
      AUTO_modes: begin
        io_led[0+7-:8] = M_alu16_out[0+7-:8];
        io_led[8+7-:8] = M_alu16_out[8+7-:8];
      end
    endcase
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    io_sel = 4'hf;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_modes_q <= 1'h0;
    end else begin
      M_modes_q <= M_modes_d;
    end
  end
  
endmodule
